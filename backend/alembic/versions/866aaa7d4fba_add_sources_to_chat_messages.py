"""add_sources_to_chat_messages

Revision ID: 866aaa7d4fba
Revises: multi_source_001
Create Date: 2025-07-22 00:25:34.959544

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '866aaa7d4fba'
down_revision: Union[str, Sequence[str], None] = 'multi_source_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_doc_embedding'), table_name='document_chunks', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_index(op.f('idx_doc_feature_type'), table_name='document_chunks')
    op.drop_index(op.f('idx_doc_source'), table_name='document_chunks')
    op.drop_index(op.f('idx_doc_user'), table_name='document_chunks')
    op.drop_table('document_chunks')
    op.add_column('chat_messages', sa.Column('sources', sa.Text(), nullable=True))
    op.drop_index(op.f('idx_user_sessions'), table_name='chat_sessions')
    op.create_index('idx_doc_feature_type', 'chat_sessions', ['feature_type'], unique=False)
    op.create_index('idx_doc_source', 'chat_sessions', ['source_id'], unique=False)
    op.create_index('idx_doc_user', 'chat_sessions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_doc_user', table_name='chat_sessions')
    op.drop_index('idx_doc_source', table_name='chat_sessions')
    op.drop_index('idx_doc_feature_type', table_name='chat_sessions')
    op.create_index(op.f('idx_user_sessions'), 'chat_sessions', ['user_id'], unique=False)
    op.drop_column('chat_messages', 'sources')
    op.create_table('document_chunks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('feature_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('chunk_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("feature_type = ANY (ARRAY['pdf'::text, 'csv'::text, 'api'::text, 'web'::text])", name=op.f('document_chunks_feature_type_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('document_chunks_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('document_chunks_pkey'))
    )
    op.create_index(op.f('idx_doc_user'), 'document_chunks', ['user_id'], unique=False)
    op.create_index(op.f('idx_doc_source'), 'document_chunks', ['source_id'], unique=False)
    op.create_index(op.f('idx_doc_feature_type'), 'document_chunks', ['feature_type'], unique=False)
    op.create_index(op.f('idx_doc_embedding'), 'document_chunks', ['embedding'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    # ### end Alembic commands ###
